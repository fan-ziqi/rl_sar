/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: MapMetaData_.idl
  Source: MapMetaData_.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_MAPMETADATA__HPP
#define DDSCXX_MAPMETADATA__HPP

#include "Time_.hpp"

#include "Pose_.hpp"

#include <cstdint>

namespace nav_msgs
{
namespace msg
{
namespace dds_
{
class MapMetaData_
{
private:
 ::builtin_interfaces::msg::dds_::Time_ map_load_time_;
 float resolution_ = 0.0f;
 uint32_t width_ = 0;
 uint32_t height_ = 0;
 ::geometry_msgs::msg::dds_::Pose_ origin_;

public:
  MapMetaData_() = default;

  explicit MapMetaData_(
    const ::builtin_interfaces::msg::dds_::Time_& map_load_time,
    float resolution,
    uint32_t width,
    uint32_t height,
    const ::geometry_msgs::msg::dds_::Pose_& origin) :
    map_load_time_(map_load_time),
    resolution_(resolution),
    width_(width),
    height_(height),
    origin_(origin) { }

  const ::builtin_interfaces::msg::dds_::Time_& map_load_time() const { return this->map_load_time_; }
  ::builtin_interfaces::msg::dds_::Time_& map_load_time() { return this->map_load_time_; }
  void map_load_time(const ::builtin_interfaces::msg::dds_::Time_& _val_) { this->map_load_time_ = _val_; }
  void map_load_time(::builtin_interfaces::msg::dds_::Time_&& _val_) { this->map_load_time_ = _val_; }
  float resolution() const { return this->resolution_; }
  float& resolution() { return this->resolution_; }
  void resolution(float _val_) { this->resolution_ = _val_; }
  uint32_t width() const { return this->width_; }
  uint32_t& width() { return this->width_; }
  void width(uint32_t _val_) { this->width_ = _val_; }
  uint32_t height() const { return this->height_; }
  uint32_t& height() { return this->height_; }
  void height(uint32_t _val_) { this->height_ = _val_; }
  const ::geometry_msgs::msg::dds_::Pose_& origin() const { return this->origin_; }
  ::geometry_msgs::msg::dds_::Pose_& origin() { return this->origin_; }
  void origin(const ::geometry_msgs::msg::dds_::Pose_& _val_) { this->origin_ = _val_; }
  void origin(::geometry_msgs::msg::dds_::Pose_&& _val_) { this->origin_ = _val_; }

  bool operator==(const MapMetaData_& _other) const
  {
    (void) _other;
    return map_load_time_ == _other.map_load_time_ &&
      resolution_ == _other.resolution_ &&
      width_ == _other.width_ &&
      height_ == _other.height_ &&
      origin_ == _other.origin_;
  }

  bool operator!=(const MapMetaData_& _other) const
  {
    return !(*this == _other);
  }

};

}

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::nav_msgs::msg::dds_::MapMetaData_>::getTypeName()
{
  return "nav_msgs::msg::dds_::MapMetaData_";
}

template <> constexpr bool TopicTraits<::nav_msgs::msg::dds_::MapMetaData_>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::nav_msgs::msg::dds_::MapMetaData_>::type_map_blob_sz() { return 1546; }
template<> constexpr unsigned int TopicTraits<::nav_msgs::msg::dds_::MapMetaData_>::type_info_blob_sz() { return 292; }
template<> inline const uint8_t * TopicTraits<::nav_msgs::msg::dds_::MapMetaData_>::type_map_blob() {
  static const uint8_t blob[] = {
 0x03,  0x02,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0xf1,  0x07,  0x57,  0xb7,  0x09,  0xbd,  0x5c,  0x8d, 
 0x18,  0x8f,  0x00,  0x60,  0x94,  0x68,  0x47,  0x00,  0x81,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x71,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x56,  0x7c,  0x5a,  0x93,  0x54, 
 0x1c,  0x3b,  0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d,  0x66,  0x5b,  0xc6,  0xd3,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0xb7,  0xe1,  0x64,  0xb3,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xea,  0xae,  0x26,  0xa6,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xb4,  0x35,  0xe2,  0x27,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x2f,  0x93,  0xf0,  0x5b,  0x8c, 
 0xef,  0xbe,  0x11,  0x90,  0x31,  0xc4,  0x88,  0x17,  0xeb,  0x7c,  0x49,  0xb1,  0x53,  0xf1,  0x56,  0x7c, 
 0x5a,  0x93,  0x54,  0x1c,  0x3b,  0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d,  0x33,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x74, 
 0x45,  0x9c,  0xa3,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xe2, 
 0x04,  0x64,  0xd5,  0xf1,  0x2f,  0x93,  0xf0,  0x5b,  0x8c,  0xef,  0xbe,  0x11,  0x90,  0x31,  0xc4,  0x88, 
 0x17,  0xeb,  0x00,  0x00,  0x51,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x41,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x5e,  0x73,  0x97,  0xe7,  0xe8,  0x64,  0x40,  0xdf,  0x64, 
 0xaf,  0x76,  0xcd,  0x4c,  0xbc,  0x47,  0x57,  0xfe,  0x07,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x2e,  0xd7,  0x30,  0x7b,  0x8e,  0xc5,  0x7c,  0x4b,  0x34, 
 0x86,  0x46,  0xa9,  0x62,  0xa1,  0xda,  0x16,  0x39,  0x42,  0xf1,  0x5e,  0x73,  0x97,  0xe7,  0xe8,  0x64, 
 0x40,  0xdf,  0x64,  0xaf,  0x76,  0xcd,  0x4c,  0xbc,  0x43,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x9d,  0xd4,  0xe4,  0x61,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x41,  0x52,  0x90,  0x76,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xfb,  0xad,  0xe9,  0xe3,  0xf1, 
 0x2e,  0xd7,  0x30,  0x7b,  0x8e,  0xc5,  0x7c,  0x4b,  0x34,  0x86,  0x46,  0xa9,  0x62,  0xa1,  0x00,  0x00, 
 0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x9d,  0xd4,  0xe4,  0x61,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x41,  0x52,  0x90,  0x76,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0xfb,  0xad,  0xe9,  0xe3,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0xf1,  0x29,  0x01,  0x86,  0x00,  0x60,  0x03,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0xf2,  0xaf,  0xf2,  0xbe,  0x67,  0xdd,  0x8e,  0x1b,  0x5c,  0x8c,  0x51,  0x02,  0x52,  0xab,  0x2d,  0x00, 
 0xe9,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x2a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x6e,  0x61,  0x76,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73, 
 0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x4d,  0x61,  0x70,  0x4d,  0x65,  0x74,  0x61, 
 0x44,  0x61,  0x74,  0x61,  0x5f,  0x00,  0x00,  0x00,  0xb1,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x2c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xd4,  0x85,  0x4f,  0x13,  0xae, 
 0xf3,  0x2d,  0xfe,  0x21,  0x57,  0xf3,  0xe6,  0x32,  0x0d,  0x00,  0x00,  0x00,  0x0e,  0x00,  0x00,  0x00, 
 0x6d,  0x61,  0x70,  0x5f,  0x6c,  0x6f,  0x61,  0x64,  0x5f,  0x74,  0x69,  0x6d,  0x65,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x72,  0x65,  0x73,  0x6f,  0x6c,  0x75,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x77,  0x69,  0x64,  0x74,  0x68,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x00,  0x07,  0x00,  0x00,  0x00,  0x68,  0x65,  0x69,  0x67,  0x68,  0x74,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x0d, 
 0x47,  0x26,  0x4b,  0x4a,  0x66,  0xfa,  0x94,  0xbb,  0xfe,  0x34,  0xf3,  0x2f,  0x7d,  0x00,  0x00,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x6f,  0x72,  0x69,  0x67,  0x69,  0x6e,  0x00,  0x00,  0x00,  0xf2,  0xd4,  0x85, 
 0x4f,  0x13,  0xae,  0xf3,  0x2d,  0xfe,  0x21,  0x57,  0xf3,  0xe6,  0x32,  0x0d,  0x72,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x2d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00, 
 0x62,  0x75,  0x69,  0x6c,  0x74,  0x69,  0x6e,  0x5f,  0x69,  0x6e,  0x74,  0x65,  0x72,  0x66,  0x61,  0x63, 
 0x65,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x54, 
 0x69,  0x6d,  0x65,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x36,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x12,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00,  0x6e,  0x61,  0x6e,  0x6f,  0x73,  0x65,  0x63,  0x00, 
 0x00,  0x00,  0xf2,  0x0d,  0x47,  0x26,  0x4b,  0x4a,  0x66,  0xfa,  0x94,  0xbb,  0xfe,  0x34,  0xf3,  0x2f, 
 0x7d,  0x00,  0x00,  0x00,  0x92,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x28,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x20,  0x00,  0x00,  0x00,  0x67,  0x65,  0x6f,  0x6d,  0x65,  0x74,  0x72,  0x79, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f, 
 0x3a,  0x3a,  0x50,  0x6f,  0x73,  0x65,  0x5f,  0x00,  0x5e,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x04,  0xac,  0x28,  0xf9,  0x19, 
 0x64,  0x23,  0x5d,  0xc9,  0x81,  0xe3,  0xf8,  0xfa,  0xdf,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x70,  0x6f,  0x73,  0x69,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x2a,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x6f,  0x01,  0xea,  0x49,  0x00,  0xbc,  0x02,  0x80,  0x58, 
 0xc3,  0xa8,  0xda,  0xe3,  0x52,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x6f,  0x72,  0x69,  0x65, 
 0x6e,  0x74,  0x61,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0xf2,  0x04,  0xac,  0x28,  0xf9,  0x19, 
 0x64,  0x23,  0x5d,  0xc9,  0x81,  0xe3,  0xf8,  0xfa,  0xdf,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x29,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x21,  0x00,  0x00,  0x00, 
 0x67,  0x65,  0x6f,  0x6d,  0x65,  0x74,  0x72,  0x79,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d, 
 0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x50,  0x6f,  0x69,  0x6e,  0x74,  0x5f, 
 0x00,  0x00,  0x00,  0x00,  0x40,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00,  0xf2,  0x6f,  0x01,  0xea,  0x49,  0x00,  0xbc,  0x02, 
 0x80,  0x58,  0xc3,  0xa8,  0xda,  0xe3,  0x52,  0x00,  0x90,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x2e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00,  0x67,  0x65,  0x6f,  0x6d, 
 0x65,  0x74,  0x72,  0x79,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a, 
 0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x51,  0x75,  0x61,  0x74,  0x65,  0x72,  0x6e,  0x69,  0x6f,  0x6e, 
 0x5f,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x0a,  0x00,  0x02,  0x00,  0x00,  0x00,  0x77,  0x00,  0x00,  0x00,  0x9a,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0xf2,  0xaf,  0xf2,  0xbe,  0x67,  0xdd,  0x8e,  0x1b,  0x5c,  0x8c,  0x51,  0x02, 
 0x52,  0xab,  0x2d,  0xf1,  0x07,  0x57,  0xb7,  0x09,  0xbd,  0x5c,  0x8d,  0x18,  0x8f,  0x00,  0x60,  0x94, 
 0x68,  0x47,  0xf2,  0xd4,  0x85,  0x4f,  0x13,  0xae,  0xf3,  0x2d,  0xfe,  0x21,  0x57,  0xf3,  0xe6,  0x32, 
 0x0d,  0xf1,  0x56,  0x7c,  0x5a,  0x93,  0x54,  0x1c,  0x3b,  0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d, 
 0xf2,  0x0d,  0x47,  0x26,  0x4b,  0x4a,  0x66,  0xfa,  0x94,  0xbb,  0xfe,  0x34,  0xf3,  0x2f,  0x7d,  0xf1, 
 0x2f,  0x93,  0xf0,  0x5b,  0x8c,  0xef,  0xbe,  0x11,  0x90,  0x31,  0xc4,  0x88,  0x17,  0xeb,  0xf2,  0x04, 
 0xac,  0x28,  0xf9,  0x19,  0x64,  0x23,  0x5d,  0xc9,  0x81,  0xe3,  0xf8,  0xfa,  0xdf,  0xf1,  0x5e,  0x73, 
 0x97,  0xe7,  0xe8,  0x64,  0x40,  0xdf,  0x64,  0xaf,  0x76,  0xcd,  0x4c,  0xbc,  0xf2,  0x6f,  0x01,  0xea, 
 0x49,  0x00,  0xbc,  0x02,  0x80,  0x58,  0xc3,  0xa8,  0xda,  0xe3,  0x52,  0xf1,  0x2e,  0xd7,  0x30,  0x7b, 
 0x8e,  0xc5,  0x7c,  0x4b,  0x34,  0x86,  0x46,  0xa9,  0x62,  0xa1, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::nav_msgs::msg::dds_::MapMetaData_>::type_info_blob() {
  static const uint8_t blob[] = {
 0x20,  0x01,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x88,  0x00,  0x00,  0x00,  0x84,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x07,  0x57,  0xb7,  0x09,  0xbd,  0x5c,  0x8d,  0x18,  0x8f,  0x00,  0x60, 
 0x94,  0x68,  0x47,  0x00,  0x85,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x64,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x56,  0x7c,  0x5a,  0x93,  0x54,  0x1c,  0x3b, 
 0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d,  0x00,  0x37,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0x2f,  0x93,  0xf0,  0x5b,  0x8c,  0xef,  0xbe,  0x11,  0x90,  0x31,  0xc4,  0x88,  0x17,  0xeb,  0x00, 
 0x55,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x5e,  0x73,  0x97,  0xe7,  0xe8,  0x64,  0x40, 
 0xdf,  0x64,  0xaf,  0x76,  0xcd,  0x4c,  0xbc,  0x00,  0x47,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0x2e,  0xd7,  0x30,  0x7b,  0x8e,  0xc5,  0x7c,  0x4b,  0x34,  0x86,  0x46,  0xa9,  0x62,  0xa1,  0x00, 
 0x57,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x88,  0x00,  0x00,  0x00,  0x84,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xaf,  0xf2,  0xbe,  0x67,  0xdd,  0x8e,  0x1b,  0x5c,  0x8c,  0x51,  0x02, 
 0x52,  0xab,  0x2d,  0x00,  0xed,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x64,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xd4,  0x85,  0x4f,  0x13,  0xae,  0xf3,  0x2d, 
 0xfe,  0x21,  0x57,  0xf3,  0xe6,  0x32,  0x0d,  0x00,  0x76,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x0d,  0x47,  0x26,  0x4b,  0x4a,  0x66,  0xfa,  0x94,  0xbb,  0xfe,  0x34,  0xf3,  0x2f,  0x7d,  0x00, 
 0x96,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x04,  0xac,  0x28,  0xf9,  0x19,  0x64,  0x23, 
 0x5d,  0xc9,  0x81,  0xe3,  0xf8,  0xfa,  0xdf,  0x00,  0x7c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x6f,  0x01,  0xea,  0x49,  0x00,  0xbc,  0x02,  0x80,  0x58,  0xc3,  0xa8,  0xda,  0xe3,  0x52,  0x00, 
 0x94,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::nav_msgs::msg::dds_::MapMetaData_>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::nav_msgs::msg::dds_::MapMetaData_>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::nav_msgs::msg::dds_::MapMetaData_)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::nav_msgs::msg::dds_::MapMetaData_>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::nav_msgs::msg::dds_::MapMetaData_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.map_load_time(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.resolution()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.width()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.height()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.origin(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::nav_msgs::msg::dds_::MapMetaData_& instance, bool as_key) {
  auto &props = get_type_props<::nav_msgs::msg::dds_::MapMetaData_>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::nav_msgs::msg::dds_::MapMetaData_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.map_load_time(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.resolution()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.width()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.height()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.origin(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::nav_msgs::msg::dds_::MapMetaData_& instance, bool as_key) {
  auto &props = get_type_props<::nav_msgs::msg::dds_::MapMetaData_>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::nav_msgs::msg::dds_::MapMetaData_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.map_load_time(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.resolution()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.width()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.height()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.origin(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::nav_msgs::msg::dds_::MapMetaData_& instance, bool as_key) {
  auto &props = get_type_props<::nav_msgs::msg::dds_::MapMetaData_>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::nav_msgs::msg::dds_::MapMetaData_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.map_load_time(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.resolution()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.width()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.height()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.origin(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::nav_msgs::msg::dds_::MapMetaData_& instance, bool as_key) {
  auto &props = get_type_props<::nav_msgs::msg::dds_::MapMetaData_>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_MAPMETADATA__HPP
